// Package httptransport provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httptransport

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for BusinessUserRole.
const (
	Business BusinessUserRole = "business"
)

// Defines values for CourierUserRole.
const (
	Courier CourierUserRole = "courier"
)

// Defines values for DeliveryStatus.
const (
	DeliveryStatusAccepted  DeliveryStatus = "accepted"
	DeliveryStatusDelivered DeliveryStatus = "delivered"
	DeliveryStatusPickedUp  DeliveryStatus = "picked_up"
	DeliveryStatusPosted    DeliveryStatus = "posted"
)

// Defines values for DeliveryPatchStatus.
const (
	DeliveryPatchStatusAccepted  DeliveryPatchStatus = "accepted"
	DeliveryPatchStatusDelivered DeliveryPatchStatus = "delivered"
	DeliveryPatchStatusPickedUp  DeliveryPatchStatus = "picked_up"
)

// Defines values for ListDeliveriesParamsStatus.
const (
	Accepted  ListDeliveriesParamsStatus = "accepted"
	Delivered ListDeliveriesParamsStatus = "delivered"
	PickedUp  ListDeliveriesParamsStatus = "picked_up"
	Posted    ListDeliveriesParamsStatus = "posted"
)

// BusinessUser defines model for BusinessUser.
type BusinessUser struct {
	BusinessAddress string           `firestore:"businessAddress"`
	BusinessName    string           `firestore:"businessName"`
	Email           string           `firestore:"email"`
	Id              string           `firestore:"id"`
	Location        GeoPoint         `firestore:"location"`
	PlaceId         *string          `firestore:"placeId,omitempty"`
	Role            BusinessUserRole `firestore:"role"`
}

// BusinessUserRole defines model for BusinessUser.Role.
type BusinessUserRole string

// CourierUser defines model for CourierUser.
type CourierUser struct {
	CourierName string          `firestore:"courierName"`
	Email       string          `firestore:"email"`
	Id          string          `firestore:"id"`
	Role        CourierUserRole `firestore:"role"`
	Balance     float64         `firestore:"balance"`
}

// CourierUserRole defines model for CourierUser.Role.
type CourierUserRole string

// Delivery defines model for Delivery.
type Delivery struct {
	AssignedTo          *string        `firestore:"assignedTo"`
	BusinessAddress     string         `firestore:"businessAddress"`
	BusinessId          *string        `firestore:"businessId,omitempty"`
	BusinessLocation    GeoPoint       `firestore:"businessLocation"`
	BusinessName        string         `firestore:"businessName"`
	CreatedAt           *time.Time     `firestore:"createdAt,omitempty"`
	CreatedBy           *string        `firestore:"createdBy,omitempty"`
	DeliveredBy         *string        `firestore:"deliveredBy"`
	DestinationAddress  string         `firestore:"destinationAddress"`
	DestinationLocation GeoPoint       `firestore:"destinationLocation"`
	Id                  *string        `firestore:"id,omitempty"`
	Item                string         `firestore:"item"`
	Payment             float64        `firestore:"payment"`
	Status              DeliveryStatus `firestore:"status"`
}

// DeliveryStatus defines model for Delivery.Status.
type DeliveryStatus string

// DeliveryCreate defines model for DeliveryCreate.
type DeliveryCreate struct {
	BusinessAddress     string   `firestore:"businessAddress"`
	BusinessLocation    GeoPoint `firestore:"businessLocation"`
	BusinessName        string   `firestore:"businessName"`
	DestinationAddress  string   `firestore:"destinationAddress"`
	DestinationLocation GeoPoint `firestore:"destinationLocation"`
	Item                string   `firestore:"item"`
	Payment             float64  `firestore:"payment"`
}

// DeliveryPatch defines model for DeliveryPatch.
type DeliveryPatch struct {
	AssignedTo *string              `firestore:"assignedTo"`
	Status     *DeliveryPatchStatus `firestore:"status,omitempty"`
}

// DeliveryPatchStatus defines model for DeliveryPatch.Status.
type DeliveryPatchStatus string

// Error defines model for Error.
type Error struct {
	Message *string `firestore:"message,omitempty"`
}

// GeoPoint defines model for GeoPoint.
type GeoPoint struct {
	Lat float64 `firestore:"lat"`
	Lng float64 `firestore:"lng"`
}

// OneOfUser defines model for OneOfUser.
type OneOfUser struct {
	union json.RawMessage
}

// PageSize defines model for PageSize.
type PageSize = int

// PageToken defines model for PageToken.
type PageToken = string

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ListDeliveriesParams defines parameters for ListDeliveries.
type ListDeliveriesParams struct {
	Status *ListDeliveriesParamsStatus `form:"status,omitempty" firestore:"status,omitempty"`
	Lat    *float64                    `form:"lat,omitempty" firestore:"lat,omitempty"`
	Lng    *float64                    `form:"lng,omitempty" firestore:"lng,omitempty"`

	// R Radius in kilometres from (lat,lng)
	R         *float64   `form:"r,omitempty" firestore:"r,omitempty"`
	PageSize  *PageSize  `form:"pageSize,omitempty" firestore:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" firestore:"pageToken,omitempty"`
}

// ListDeliveriesParamsStatus defines parameters for ListDeliveries.
type ListDeliveriesParamsStatus string

// CreateDeliveryJSONRequestBody defines body for CreateDelivery for application/json ContentType.
type CreateDeliveryJSONRequestBody = DeliveryCreate

// UpdateDeliveryJSONRequestBody defines body for UpdateDelivery for application/json ContentType.
type UpdateDeliveryJSONRequestBody = DeliveryPatch

// AsBusinessUser returns the union data inside the OneOfUser as a BusinessUser
func (t OneOfUser) AsBusinessUser() (BusinessUser, error) {
	var body BusinessUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBusinessUser overwrites any union data inside the OneOfUser as the provided BusinessUser
func (t *OneOfUser) FromBusinessUser(v BusinessUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBusinessUser performs a merge with any union data inside the OneOfUser, using the provided BusinessUser
func (t *OneOfUser) MergeBusinessUser(v BusinessUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCourierUser returns the union data inside the OneOfUser as a CourierUser
func (t OneOfUser) AsCourierUser() (CourierUser, error) {
	var body CourierUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCourierUser overwrites any union data inside the OneOfUser as the provided CourierUser
func (t *OneOfUser) FromCourierUser(v CourierUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCourierUser performs a merge with any union data inside the OneOfUser, using the provided CourierUser
func (t *OneOfUser) MergeCourierUser(v CourierUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OneOfUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all businesses
	// (GET /businesses)
	ListBusinesses(c *gin.Context)
	// List all couriers
	// (GET /couriers)
	ListCouriers(c *gin.Context)
	// List deliveries (optional geo-filter)
	// (GET /deliveries)
	ListDeliveries(c *gin.Context, params ListDeliveriesParams)
	// Create a new delivery (business role)
	// (POST /deliveries)
	CreateDelivery(c *gin.Context)
	// Update delivery status / assignment (courier)
	// (PATCH /deliveries/{id})
	UpdateDelivery(c *gin.Context, id string)
	// Courier attempts to claim a delivery
	// (POST /deliveries/{id}/accept)
	AcceptDelivery(c *gin.Context, id string)
	// Dummy route to generate user schemas
	// (GET /me)
	GetMe(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListBusinesses operation middleware
func (siw *ServerInterfaceWrapper) ListBusinesses(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListBusinesses(c)
}

// ListCouriers operation middleware
func (siw *ServerInterfaceWrapper) ListCouriers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCouriers(c)
}

// ListDeliveries operation middleware
func (siw *ServerInterfaceWrapper) ListDeliveries(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDeliveriesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "lat", c.Request.URL.Query(), &params.Lat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lat: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "lng", c.Request.URL.Query(), &params.Lng)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lng: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "r" -------------

	err = runtime.BindQueryParameter("form", true, false, "r", c.Request.URL.Query(), &params.R)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter r: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", c.Request.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageToken: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDeliveries(c, params)
}

// CreateDelivery operation middleware
func (siw *ServerInterfaceWrapper) CreateDelivery(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDelivery(c)
}

// UpdateDelivery operation middleware
func (siw *ServerInterfaceWrapper) UpdateDelivery(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDelivery(c, id)
}

// AcceptDelivery operation middleware
func (siw *ServerInterfaceWrapper) AcceptDelivery(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AcceptDelivery(c, id)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/businesses", wrapper.ListBusinesses)
	router.GET(options.BaseURL+"/couriers", wrapper.ListCouriers)
	router.GET(options.BaseURL+"/deliveries", wrapper.ListDeliveries)
	router.POST(options.BaseURL+"/deliveries", wrapper.CreateDelivery)
	router.PATCH(options.BaseURL+"/deliveries/:id", wrapper.UpdateDelivery)
	router.POST(options.BaseURL+"/deliveries/:id/accept", wrapper.AcceptDelivery)
	router.GET(options.BaseURL+"/me", wrapper.GetMe)
}
