
openapi: "3.0.3"

info:
  title: Courier API
  version: "0.1.1"
  description: >
    REST interface for the Courier-Management project â€” now aligned with
    the Firestore document structure that includes pickup and destination
    addresses.

servers:
  - url: http://localhost:3000
    description: Local
  - url: https://courier-api.example.com
    description: Production

paths:

  /deliveries:
    post:
      summary: Create a new delivery (business role)
      operationId: createDelivery
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DeliveryCreate' }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Delivery' }
        "401": { $ref: '#/components/responses/Unauthorized' }

    get:
      summary: List deliveries (optional geo-filter)
      operationId: listDeliveries
      parameters:
        - name: status
          in: query
          schema: { type: string, enum: [posted, accepted, picked_up, delivered] }
        - name: lat
          in: query
          schema: { type: number, format: double }
        - name: lng
          in: query
          schema: { type: number, format: double }
        - name: r
          in: query
          description: Radius in kilometres from (lat,lng)
          schema: { type: number, format: double }
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageToken'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Delivery' }
        "401": { $ref: '#/components/responses/Unauthorized' }

  /deliveries/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }

    patch:
      summary: Update delivery status / assignment (courier)
      operationId: updateDelivery
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DeliveryPatch' }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Delivery' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }

  /deliveries/{id}/accept:
    post:
      summary: Courier attempts to claim a delivery
      operationId: acceptDelivery
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Accepted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Delivery' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "409":
          description: Delivery already assigned
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /me:
    get:
      summary: Dummy route to generate user schemas
      operationId: getMe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneOfUser'
  /couriers:
    get:
      summary: List all couriers
      operationId: listCouriers
      responses:
        '200':
          description: A list of couriers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourierUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /businesses:
    get:
      summary: List all businesses
      operationId: listBusinesses
      responses:
        '200':
          description: A list of businesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:

  ##################################################################
  # Schemas
  ##################################################################
  schemas:

    GeoPoint:
      type: object
      properties:
        lat: { type: number, format: double }
        lng: { type: number, format: double }
      required: [lat, lng]

    Delivery:
      type: object
      properties:
        id:               { type: string, readOnly: true }
        createdBy:        { type: string, readOnly: true }
        businessId:       { type: string, readOnly: true }
        businessName:     { type: string }
        businessAddress:  { type: string }
        businessLocation: { $ref: '#/components/schemas/GeoPoint' }
        destinationAddress:  { type: string }
        destinationLocation: { $ref: '#/components/schemas/GeoPoint' }
        item:             { type: string }
        status:
          type: string
          enum: [posted, accepted, picked_up, delivered]
        assignedTo:       { type: string, nullable: true }
        deliveredBy:       { type: string, nullable: true }
        payment:       { type: number, format: double}


        createdAt:        { type: string, format: date-time, readOnly: true }
      required:
        [id, createdBy, businessId, businessName, businessAddress,
         businessLocation, destinationAddress, destinationLocation,
         item, status, createdAt, payment]

    DeliveryCreate:
      type: object
      properties:
        businessName:        { type: string }
        businessAddress:     { type: string }
        businessLocation:    { $ref: '#/components/schemas/GeoPoint' }
        destinationAddress:  { type: string }
        destinationLocation: { $ref: '#/components/schemas/GeoPoint' }
        item:                { type: string }
        payment:             { type: number, format: double}

      required:
        [businessName, businessAddress, businessLocation,
         destinationAddress, destinationLocation, item, payment]

    DeliveryPatch:
      type: object
      properties:
        status:
          type: string
          enum: [accepted, picked_up, delivered]
        assignedTo: { type: string, nullable: true }
      additionalProperties: false

    Error:
      type: object
      properties:
        message: { type: string }

    BusinessUser:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        businessName:
          type: string
        role:
          type: string
          enum: [business]
        businessAddress:
          type: string
        location:
          $ref: '#/components/schemas/GeoPoint'
        placeId:
          type: string
      required: [id, email, businessName, role, businessAddress, location]

    CourierUser:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        courierName:
          type: string
        role:
          type: string
          enum: [courier]
      required: [id, email, courierName, role]

    OneOfUser:
      oneOf:
        - $ref: '#/components/schemas/BusinessUser'
        - $ref: '#/components/schemas/CourierUser'

  ##################################################################
  # Reusable params & responses
  ##################################################################
  parameters:
    PageSize:
      name: pageSize
      in: query
      schema: { type: integer, minimum: 1, maximum: 100 }
    PageToken:
      name: pageToken
      in: query
      schema: { type: string }

  responses:
    Unauthorized:
      description: Invalid or missing auth token
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  ##################################################################
  # Auth
  ##################################################################
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
